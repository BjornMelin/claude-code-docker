# Enhanced Claude Code Docker Configuration Template
# Multi-Language Support with Package Manager Selection
# Copy this file to .env and customize as needed

# ==============================================================================
# HOST SYSTEM CONFIGURATION (automatically detected)
# ==============================================================================
HOST_UID=1000
HOST_GID=1000
HOME=/home/your-username
TZ=UTC

# ==============================================================================
# CONTAINER CONFIGURATION
# ==============================================================================
CONTAINER_NAME=claude-code-dev
CONTAINER_HOSTNAME=claude-code-dev
CONTAINER_USERNAME=developer

# Working directory inside container
CONTAINER_WORKING_DIR=/workspace/repos

# ==============================================================================
# PACKAGE MANAGER SELECTION
# ==============================================================================

# Node.js Package Manager Selection
# Options: npm, pnpm, yarn
# Default: pnpm (RECOMMENDED - 10-100x faster than npm)
NODE_PACKAGE_MANAGER=pnpm

# Benefits of each:
# • pnpm: Ultra-fast, efficient disk usage, strict dependencies, best for performance
# • npm:  Standard, maximum compatibility, familiar to all developers
# • yarn: Fast, reliable, excellent lockfiles, good for teams

# Python Package Manager Selection  
# Options: pip, uv
# Default: uv (HIGHLY RECOMMENDED - 10-100x faster than pip)
PYTHON_PACKAGE_MANAGER=uv

# Benefits of each:
# • uv:  Lightning fast (Rust-based), automatic virtual environments, modern resolver
# • pip: Standard, maximum compatibility, simple and familiar

# Language Versions
PYTHON_VERSION=3.12

# ==============================================================================
# SHELL CONFIGURATION
# ==============================================================================

# Shell configuration
# Options: zsh, bash, fish
PREFERRED_SHELL=zsh

# Shell configuration file (mounted read-only)
# The container will source this file to inherit your aliases and settings
SHELL_CONFIG_PATH=${HOME}/.zshrc          # For zsh users
# SHELL_CONFIG_PATH=${HOME}/.bashrc       # For bash users  
# SHELL_CONFIG_PATH=${HOME}/.config/fish/config.fish  # For fish users

# ==============================================================================
# DIRECTORY MAPPINGS
# ==============================================================================

# Core repository directory (where your code projects are stored)
# This will be mounted as read/write at /workspace/repos
REPOS_PATH=${HOME}/repos

# ==============================================================================
# CONFIGURATION FILE MAPPINGS
# ==============================================================================

# Git configuration (mounted read-only)
GIT_CONFIG_PATH=${HOME}/.gitconfig

# SSH directory for git operations (mounted read-only)
SSH_PATH=${HOME}/.ssh

# NPM configuration (mounted read-only)
NPM_CONFIG_PATH=${HOME}/.npmrc

# ==============================================================================
# CUSTOM DIRECTORY MAPPINGS (Optional)
# ==============================================================================
# Map up to 3 additional directories from your host to the container
# Uncomment and configure as needed

# Custom mapping #1
# CUSTOM_PATH_1=/path/to/your/host/directory
# CUSTOM_TARGET_1=/workspace/custom1
# CUSTOM_1_READONLY=false

# Custom mapping #2  
# CUSTOM_PATH_2=/path/to/another/directory
# CUSTOM_TARGET_2=/workspace/custom2
# CUSTOM_2_READONLY=true

# Custom mapping #3
# CUSTOM_PATH_3=/path/to/third/directory
# CUSTOM_TARGET_3=/workspace/custom3
# CUSTOM_3_READONLY=false

# ==============================================================================
# PACKAGE MANAGER SPECIFIC CONFIGURATIONS
# ==============================================================================

# Uncomment these if you want to mount package manager config files

# For pnpm users - global pnpm configuration
# PNPM_CONFIG_PATH=${HOME}/.pnpmrc

# For uv users - global uv configuration
# UV_CONFIG_PATH=${HOME}/.config/uv

# For yarn users - global yarn configuration  
# YARN_CONFIG_PATH=${HOME}/.yarnrc.yml

# ==============================================================================
# EXAMPLES OF COMMON CUSTOM MAPPINGS
# ==============================================================================

# Example: Mount your Documents directory
# CUSTOM_PATH_1=${HOME}/Documents
# CUSTOM_TARGET_1=/workspace/documents
# CUSTOM_1_READONLY=false

# Example: Mount a shared project directory
# CUSTOM_PATH_2=/mnt/c/Users/YourName/SharedProjects
# CUSTOM_TARGET_2=/workspace/shared
# CUSTOM_2_READONLY=false

# Example: Mount configuration directory (read-only)
# CUSTOM_PATH_3=${HOME}/.config
# CUSTOM_TARGET_3=/workspace/host-config
# CUSTOM_3_READONLY=true

# Example: Mount Windows Desktop (useful for WSL users)
# CUSTOM_PATH_1=/mnt/c/Users/YourName/Desktop
# CUSTOM_TARGET_1=/workspace/desktop
# CUSTOM_2_READONLY=false

# Example: Mount development tools config (read-only)
# CUSTOM_PATH_2=${HOME}/.vscode
# CUSTOM_TARGET_2=/workspace/vscode-config
# CUSTOM_2_READONLY=true

# Example: Mount project templates
# CUSTOM_PATH_3=${HOME}/project-templates
# CUSTOM_TARGET_3=/workspace/templates
# CUSTOM_3_READONLY=true

# ==============================================================================
# PERFORMANCE OPTIMIZATION EXAMPLES
# ==============================================================================

# For Maximum Performance (Recommended):
# NODE_PACKAGE_MANAGER=pnpm
# PYTHON_PACKAGE_MANAGER=uv
# Benefits: 10-100x faster package operations, efficient disk usage

# For Maximum Compatibility:
# NODE_PACKAGE_MANAGER=npm  
# PYTHON_PACKAGE_MANAGER=pip
# Benefits: Works with all existing projects, familiar commands

# For Team Development:
# NODE_PACKAGE_MANAGER=yarn
# PYTHON_PACKAGE_MANAGER=uv
# Benefits: Excellent lockfiles for teams, fast Python operations

# ==============================================================================
# ALTERNATIVE CONTAINER CONFIGURATIONS
# ==============================================================================

# For multiple Claude Code environments:
# CONTAINER_NAME=claude-code-project1
# CONTAINER_HOSTNAME=claude-project1
# REPOS_PATH=/path/to/project1/repos

# For team development:
# CONTAINER_USERNAME=teamdev
# REPOS_PATH=/shared/team-repos

# For Windows-centric development:
# REPOS_PATH=/mnt/c/Code
# CUSTOM_PATH_1=/mnt/c/Users/YourName/Documents
# CUSTOM_TARGET_1=/workspace/documents

# For specialized development environments:
# PYTHON_VERSION=3.11  # Use different Python version
# NODE_PACKAGE_MANAGER=yarn  # Team uses Yarn
# CUSTOM_PATH_1=${HOME}/.aws  # Mount AWS config
# CUSTOM_TARGET_1=/workspace/aws-config
# CUSTOM_1_READONLY=true

# ==============================================================================
# PACKAGE MANAGER PERFORMANCE NOTES
# ==============================================================================

# PNPM Performance Tips:
# • Uses hard links for space efficiency
# • Strict node_modules structure prevents phantom dependencies
# • Fastest for monorepos and large projects
# • Compatible with npm commands

# UV Performance Tips:  
# • Written in Rust for maximum speed
# • Handles virtual environments automatically
# • Caches packages efficiently
# • Modern dependency resolution
# • Drop-in replacement for pip in most cases

# Yarn Performance Tips:
# • Excellent for team collaboration
# • Deterministic lockfiles
# • Good caching mechanisms
# • Zero-installs capability with PnP

# ==============================================================================
# QUICK COMMANDS REFERENCE
# ==============================================================================

# After container is running, these aliases will be available:
# 
# Node.js Package Management:
#   ni <package>     - Install package with selected Node manager
#   na <package>     - Add package to project  
#   nr <script>      - Run npm script
#
# Python Package Management:
#   pi <package>     - Install package with selected Python manager
#   pir              - Install from requirements.txt
#   pirun <command>  - Run command with package manager (uv only)
#
# Claude Code:
#   claude           - Start Claude Code
#   cc               - Claude Code alias
#   claude-config    - Configure Claude Code
#
# Container Info:
#   ./container-info.sh  - Show container configuration

# ==============================================================================
# NOTES
# ==============================================================================
# 
# - All paths should be absolute (start with / or ${HOME})
# - Host paths must exist before starting the container  
# - Container paths should start with /workspace/ for organization
# - Set READONLY=true for configuration files you don't want to modify
# - After editing this file, rebuild the container: docker-compose build --no-cache
# - Use the interactive setup script for guided configuration: ./setup-enhanced.sh
# - Package manager selection affects performance significantly
# - pnpm + uv combination provides maximum performance (10-100x faster)
# - npm + pip combination provides maximum compatibility